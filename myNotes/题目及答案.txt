1、八种基本数据类型的大小，以及他们的封装类
	基本数据类型（封装类）：（单位：字节byte）
	int (Integer): 4
	long(Long): 8
	short(Short): 2 
	byte(Byte): 1
	boolean(Boolean): 2
	float(Float): 4
	double(Double): 8
	char(Character): 2
	
	1个字节 = 8位、1个字节 = 1个字符、2个字节 = 一个中文字符
	
2、引用数据类型
	例：String、一切类对象、数组类型
	
3、Switch能否用string做参数
	可以、JDK1.7以后都可以
	
4、equals与==的区别
	== 判断的是不是同一个内存空间
	equals 判读的是内存空间内的值是否相等
	
	使用==比较基本类型，equals比较引用类型
	
5、自动装箱，常量池
	自动拆箱和自动装箱定义：
	自动装箱是将一个java定义的基本数据类型赋值给相应封装类的变量。 
	拆箱与装箱是相反的操作，自动拆箱则是将一个封装类的变量赋值给相应基本数据类型的变量
	
6、Object有哪些公用方法
	Object是所有类的父类，任何类都默认继承Object
	clone 保护方法，实现对象的浅复制，只有实现了Cloneable接口才可以调用该方法，否则抛出CloneNotSupportedException异常。
	equals 在Object中与==是一样的，子类一般需要重写该方法。
	hashCode 该方法用于哈希查找，重写了equals方法一般都要重写hashCode方法。这个方法在一些具有哈希功能的Collection中用到。
	getClass final方法，获得运行时类型
	wait 使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。 
	wait() 方法一直等待，直到获得锁或者被中断。 wait(long timeout) 设定一个超时间隔，如果在规定时间内没有获得锁就返回。
	调用该方法后当前线程进入睡眠状态，直到以下事件发生
	1、其他线程调用了该对象的notify方法。 
	2、其他线程调用了该对象的notifyAll方法。 
	3、其他线程调用了interrupt中断该线程。 
	4、时间间隔到了。 
	5、此时该线程就可以被调度了，如果是被中断的话就抛出一个InterruptedException异常。
	notify 唤醒在该对象上等待的某个线程。
	notifyAll 唤醒在该对象上等待的所有线程。
	toString 转换成字符串，一般子类都有重写，否则打印句柄。
	
7、Java的四种引用，强弱软虚，用到的场景
	从JDK1.2版本开始，把对象的引用分为四种级别，从而使程序能更加灵活的控制对象的生命周期。这四种级别由高到低依次为：强引用、软引用、弱引用和虚引用。
	1、强引用
		最普遍的一种引用方式，如String s = "abc"，变量s就是字符串“abc”的强引用，只要强引用存在，则垃圾回收器就不会回收这个对象。
		
	2、软引用（SoftReference）
		用于描述还有用但非必须的对象，如果内存足够，不回收，如果内存不足，则回收。
		一般用于实现内存敏感的高速缓存，软引用可以和引用队列ReferenceQueue联合使用，如果软引用的对象被垃圾回收，
		JVM就会把这个软引用加入到与之关联的引用队列中。

	3、弱引用（WeakReference）
		弱引用和软引用大致相同，弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。
		在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。

	4、虚引用（PhantomReference）
		就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，
		那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。 虚引用主要用来跟踪对象被垃圾回收器回收的活动。

	虚引用与软引用和弱引用的一个区别在于：
		虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引，
		就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。
		
8、Hashcode的作用