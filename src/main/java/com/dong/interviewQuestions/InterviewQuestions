JAVA面试题
一、Java基础
    1、Java基础
       Q1：JDK与JRE有什么区别？

            JDK是开发环境，JRE是运行环境。
            具体来说JDK包含了JRE，还有javac编译器和其他调试和分析工具等，而JRE只是一个java程序的运行环境。

       Q2：==和equals()的区别？

            ==：对基本类型来说比较的是值是否相同，对引用类型来说比较的是引用是否相同。
            equals()：默认情况下是对引用的比较，只是很多类重写了equals()方法，所以大多时候是用来比较值是否相同。

       Q3：两个对象的hashcode()相同，则equals也一定为true，对吗？

            不对，因为无论哈希函数设计的多么精细都会存在两个关键字映射在同一个地址上，
            即有可能存在两个键值对不相等，哈希值相等的情况。

       Q4：final在Java中有什么作用？

            final修饰的类为最终类，不能被继承。
            final修饰的方法不能被重写。
            final修改的变量为常量，必须被初始化，而且被初始化后不能被改变。

       Q5：java中的Math.round(-1.5)等于多少？

            -1,Math.round()计算机函数，四舍五入。

       Q6：String属于基础数据类型吗？

            不属于，基础数据类型只有八种：int long short double float byte boolean char

       Q7：java中的操作字符串都有哪些类？它们之间有什么区别?

            String、StringBuffer、StringBuilder
            String：声明的是不可变的对象，每次操作都会生成新的对象。
            StringBuffer：声明的是可变的对象，可以对原有的对象更改，并且是线程安全的，但性能略低。
            StringBuilder：声明的是可变的对象，可以对原有的对象更改，但是非线程安全，但性能高。
            所以，如果对象不可变选String；对象可变，单线程的选StringBuilder,要线程安全选择StringBuffer。

       Q8：String str = "i"和String str = new String(i)一样吗？

            不一样，内存的分配方式不一样，java虚拟机会吧String str = "i"的内存分配到常量池中，
            而String str = new String(i)则被分配在堆内存中。

       Q9：如何将字符串反转？

            使用StringBuffer或StringBuilder中的reverse()方法。

       Q10：String类中的常用方法有哪些？

            indexOf()：返回指定字符串的索引；
            chatAt()：返回指定索引处的字符；
            replace():字符串替换；
            trim():去除空字符；
            split():根据指定字符分割字符串为数组；
            getByte():返回字符串的byte型数组；
            length():获取字符串长度；
            toLowerCase():将字符串转换为小写；
            toUpperCase():将字符串转换为大写；
            subString():截取字符串；
            equals():比较字符串的值；

       Q11：抽象类必须要有抽象方法吗？

            不需要，抽象类不一定有抽象方法

       Q12：普通类和抽象类有什么区别？

            普通类不能有抽象方法，抽象类可以有。
            抽象类不能被实例化，普通类可以被实例化。

       Q13：抽象类能被final修饰吗？

            不能，抽象类定义就让其他类继承的，而final类是不能被继承的，彼此冲突。

       Q14：接口和抽象类有什么区别？

            接口必须使用implement来实现，抽象类是由子类用extends来继承的。
            抽象类可以有构造方法，接口不能有。
            类可以实现多个接口，但只能继承一个抽象类。

       Q15：java中的IO流分为几种？

            按功能：分为输入流和输出流；
            按类型：分为字符流和字节流，字符流和字节流的区别是，字符流按16位传输以字符为单位输入输出数据，
                字节流按8位传输以字节为单位来输入输出数据。

       Q16：BIO、NIO、AIO有什么区别？

            BIO：Block IO同步阻塞是IO,就是常用的传统IO,它的特点是模式简单、使用方便，并发处理能力低。
            NIO：New IO同步非阻塞IO,是传统IO的升级，客户端和服务端通过channel(通道)通讯，实现多路复用。
            AIO:asynchronous IO异步非阻塞IO,是NIO的升级，也叫NIO2,异步I0的操作基于事件和回调机制。

       Q17：Files的常用方法有哪些？

            Files.exists()：判断文件路径是否存在
            Files.createFile()：创建文件
            Files.createDirectory()：创建目录
            Files.delete()：删除一个文件或者目录
            Files.copy()：复制文件
            Files.move()：移动文件
            Files.size()：查看文件个数
            Files.read()：读取文件
            Files.write()：写入文件

    2、容器
        Q1：java容器有哪些？

            Collection
                List
                    ArrayList
                    LinkedList
                    Vector(Stack)
                Queue
                    PriorityQueue
                Set
                    HashSet(LinkHashSet)
                    TreeSet
            Map
                HashMap
                TreeMap

        Q2：Collection和Collections有什么区别？

            Collection：是一个集合接口，它提供了一些对集合对象基本操作的通用方法接口，它的意义在于为各种具体的集合最大化的统一操作方式。
            Collections：是一个工具类，它提供了一系列静态方法对集合操作，包括排序、线程安全等。

        Q3：List、Set、Map之间的区别是什么？

            List和Set都是继承了Collection接口，主要实现了AbstractList和AbstractSet;
            List里面的元素可重复，按顺序排列，Set里面的元素不可重复，无序；
            Map主要有HashMap和TreeMap两个实现类，里面的元素都是不可重复的，无序。

        Q4：HashMap和HashTable有什么区别？
            HashMap去掉了contains方法，但加上了containsKey和containsValue；
            HashTable是同步的，HashMap是非同步的，所以HashTable是线程安全的；
            HashMap允许键值为null,HashTable不允许；

        Q5：如何决定使用 HashMap 还是 TreeMap？
            插入删除多选择使用HashMap,查询遍历多选择使用TreeMap。

        Q6：说一下 HashMap 的实现原理？
            概述：HashMap是基于哈希表的Map接口的非同步实现，此实现类提供了所有可选的映射操作，并且键值都可以为null值，
                但是不提供映射的顺序，且不保证每次的顺序都一样。
            数据结构：HashMap是一种"链表散列"的数据结构，即链表和数组的结合体。
            原理：往HashMap中put值时，首先根据key的hashCode计算出hash值，然后根据hash值等到对应的数组下标（即数组位置），
                如果该数组位置上有元素，那么会将该元素以链表的形式存放，新加入的放在链头，最先加入的放在链尾。如果没有元素，则把该值
                放在当前位置。


        Q7：说一下 HashSet 的实现原理？
            HashSet是基于HashMap实现的，它的底层原理就是HashMap的原理。
            HashSet的值都存在HashMap的key中，HashMap的value存的都是PERSENT。

        Q8：ArrayList 和 LinkedList、Vector 的区别是什么？
            ArrayList的底层数据结构是数组，支持随机访问,所以适合查询和遍历，不是适合插入删除。
            LinkedList的数据结构是链表，不支持随机访问，所以不适合查询和遍历，而因为是链表结构，且提供了
                专门操作表头和表尾的方法，所以很适合数据的动态插入和删除。
            Vector的底层数据结构和ArrayList一样，都是数组，但是Vector是支持线程同步的，所以随机访问的开销会
                比ArrayList大，但如果集合数据量过大的话，用Vector有一定的优势。

        Q9：如何实现数组和 List 之间的转换？
            数组转List：Arrays.asList()
            List转数组：ArrayList.toArray()

        Q10：Array 和 ArrayList 有何区别？
            Array可以存储基本类型和对象类型，大小的固定，只能存储同一种数据类型的元素
            ArrayList只能存储对象类型，大小是动态变化的，可以存储不同的类型的元素，还提供了更多的操作方法和特性。

        Q11：在 Queue 中 poll()和 remove()有什么区别？
            两者的作用都是从Queue中取出一个元素，但poll()获取元素失败时会返回空，而remove()会抛出异常。

        Q12：哪些集合类是线程安全的？
            Vector：相比ArrayList多了线程安全。
            HashTable：相比HashMap多了线程安全。
            Stack：堆栈类。
            Enumeration：枚举。

        Q13：迭代器 Iterator 是什么？
            迭代器是一种设计模式，所以Iterator是一个采用迭代器模式的对象，它的作用是遍历并选择序列中的对象。
                它提供了一个可以访问容器对象内的元素，又不会暴露容器对象内部细节的方法。迭代器亦被称为轻量级的容器。

        Q14： Iterator 怎么使用？有什么特点？
            使用方法：使用容器的iterator方法返回Iterator对象，使用Iterator对象中的hasNext()方法判断容器中有没有元素，
               使用next()方法获取第一个元素，获取元素都是由next()方法获取。
            特点：开发人员不需要了解容器的底层结构，就可以实现对容器的遍历。创建的代价小，所以被称为轻量级的容器。

        Q15：Iterator 和 ListIterator 有什么区别？
            Iterator只能正向遍历集合，可以遍历List、Set集合，适合获取和删除元素。
            ListIterator支持正向和反向遍历，但只能遍历List集合，适合获取增加修改删除元素

    3、多线程
        Q1：并行和并发有什么区别？
            并行是指两个或两个以上事件同一时刻发生，并发是指两个或两个以上事件同一时间间隔发生。
            并行是在不同实体上的多个事件，并发是同一个实体上的多个事件。
            并行在多台处理器上同时处理多个任务，并发是在一台处理器上“同时”处理多个任务

        Q2：
        Q3：
        Q4：
        Q5：
        Q6：
        Q7：
        Q8：
        Q9：
        Q10：
        Q11：
        Q12：
        Q13：
        Q14：
        Q15：
        Q16：
        Q17：

    4、反射
        Q1：什么是反射？
            反射是指程序可以访问、检测、修改本身状态或行为的一种能力。
            Java反射是指：在Java运行环境中，对于任意一个类能知道它的所有属性和方法。对于任意一个对象能调用
                它的任意方法。
            Java反射机制主要提供了以下功能：
                在运行时能知道任意一个对象的所属类。
                在运行时能构造任意一个类的对象。
                在运行时能知道任意一个类的属性和方法。
                在运行时能调用任意一个对象的方法。

        Q2： 什么是 java 序列化？什么情况下需要序列化？
            就是把内存里的对象用一串字节来描述的过程叫序列化。
            序列化：把对象转换为字节序列的过程称为对象的序列化。
            反序列：把字节序列转换为对象的过程称为对象的反序列化。
            使用场景：
                把内存中的对象保存到持久化到磁盘或者数据库中时。
                用套接字在网络上传送对象时。
                通过RMI传输对象时。（RMI，虚拟机之间通信的远程方法调用）

        Q3：动态代理是什么？有哪些应用？
            当给实现了某个接口的类中的方法，加一些额外的处理时，就可以新建一个代理类，不仅实现了原有的功能，
                还加上了额外处理。这个代理类不是事先定义好的，而是动态生成的，所以称为动态代理。
            应用场景：
                AOP、加日志、加权限

        Q4：怎么实现动态代理？(待回答)
            1、创建一个代理类。
            2、动态代理类中创建一个代理对象。
            3、创建一个生成代理对象的方法。
            4、new一个代理实例newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h)，
                三个参数分别为：类加载器、需要实现的接口集合、调用处理器（调用代理对象的方法）。
            5、传入被代理对象实例一个代理对象，调用被代理方法就可以了。

            首先必须定义一个接口，还要有一个InvocationHandler(将实现接口的类的对象传递给它)处理类。
            再有一个工具类Proxy(习惯性将其称为代理类，因为调用他的newInstance()可以产生代理对象,
            其实他只是一个产生代理对象的工具类）。利用到InvocationHandler，拼接代理类源码，
            将其编译生成代理类的二进制码，利用加载器加载，并将其实例化产生代理对象，最后返回。

    5、对象拷贝
        Q1：为什么要使用克隆？
            想对一个对象进行处理，又想保留原来的数据，这时就需要用到克隆技术了。
            Java中克隆是针对类的实例。

        Q2：如何实现对象克隆？
            实现Cloneable接口，并重写clone方法。
            实现Serializable接口，通过序列化和反序列化实现深度克隆。

        Q3：深拷贝和浅拷贝区别是什么？
            浅拷贝只是复制了一个引用值，内存地址并未发生改变，一个引用改变了内存值，另一个也随之改变
            深拷贝同时复制了一个引用值和内存对象。两个引用互不干扰。

    6、Java Web模块
        Q1：jsp 和 servlet 有什么区别？
            1：jsp经编译后变成了Servlet（JSP的本质就是servlet，jvm不能识别jsp的代码，只能识别java类，
                web容器就jsp编译为jvm能识别的java类）。
            2：jsp更多作用于页面显示，servlet更多作用于业务的逻辑控制。
            3：Servlet没有内置对象，jsp可以通过HttpServletRequest对象和HttpServletResponse对象以及
                HttpServlet对象获得内置对象。
            4：jsp是servlet的一种简化，其中的java脚本如何嵌到一个类中由jsp容器完成。而servlet是一个
                完整的java类，有个service方法作用于对客户端的响应。

        Q2： jsp 有哪些内置对象？作用分别是什么？
            request：封装客户端的请求，包含get和post请求。
            response：封装服务器对客户端的响应。
            session：封装用户的会话。
            pageContext：通过该对象可以获取其他对象。
            application：封装服务器运行环境的对象。
            out：输出服务器响应的输出流对象。
            config：Web应用的配置对象。
            page：jsp页面本身（相当于java中的this）
            exception：封装页面中抛出异常对象

        Q3：说一下 jsp 的 4 种作用域？
            page：作用于当前页面相关的属性和对象。
            request：作用于当前请求，可能涉及多个页面。
            session：作用于当前用户会话，可能涉及多个请求。
            application：作用于整个web程序，包括所有页面，请求和会话的一个全局作用域。

        Q4：session 和 cookie 有什么区别？
            session：由于http是无状态的协议，所以服务端需要记录用户状态时，就要用某种机制来记录
                用户状态，session就是这种机制。
            cookie：服务端要如何识别特定的用户？这是就要用到cookie来存储每个session的特定标识sessionId,
                所以cookie就是一种保存客户端信息的机制。
            总结：session是服务端记录用户状态的一种机制，cookie是客户端记录信息的一种机制，也是实现session的一种方式。

        Q5：说一下 session 的工作原理？
            其实session就是保存在服务器上一个类似于散列表格的文件。里面存有我们需要的信息，存储方式类似
                Map，键值存储的是sessionId。用户向服务器发送请求是带上sessionId，这样就能从session文件中获取到对应的值。

        Q6：如果客户端禁止 cookie 能实现 session 还能用吗？
        Q7：
        Q8：
        Q9：
        Q10：
        Q11：
        Q12：
        Q13：
        Q14：
        Q15：
        Q16：
        Q17：

    7、异常模块
        Q1：
        Q2：
        Q3：
        Q4：
        Q5：
        Q6：
        Q7：
        Q8：
        Q9：
        Q10：
        Q11：
        Q12：
        Q13：
        Q14：
        Q15：
        Q16：
        Q17：

    8、网络模块
        Q1： http 响应码 301 和 302 代表的是什么？有什么区别？
        Q2：
        Q3：
        Q4：
        Q5：
        Q6：
        Q7：
        Q8：
        Q9：
        Q10：
        Q11：
        Q12：
        Q13：
        Q14：
        Q15：
        Q16：
        Q17：

    9、设计模式
        Q1：说一下你熟悉的设计模式？
            单例模式：只允许有一个实例对象，分为懒汉式和饿汉式
            工厂模式：
            抽象工厂模式：
            代理模式：
            建造者模式：
            观察者模式：对象间有一对多的依赖关系，当被观察者发生变化时，所有观察者将得到通知并更新。
            装饰器模式：对已有的业务逻辑进行进一步的封装，使其增加额外的功能。
            适配器模式：将两种不同的事务联系到一起。例：变压器
        Q2：
        Q3：
        Q4：
        Q5：
        Q6：
        Q7：
        Q8：
        Q9：
        Q10：
        Q11：
        Q12：
        Q13：
        Q14：
        Q15：
        Q16：
        Q17：

二、框架
    1、Spring
        ·Spring MVC
        ·Spring Boot
        ·Spring Cloud
    2、Hibernate
    3、MyBatis
    4、中间件
        ·RabbitMQ
        ·Kafka
        ·Zookeeper
    5、数据库
        ·MySQL
        ·Redis
三、JVM
