JAVA并发编程
	一、核心理论
		1、共享性
		2、互斥性
		3、原子性
		4、可见性
		5、有序性
	二、synchronized的实现原理
	三、synchronized的底层优化
	四、线程间的协作
	五、volatile的使用及其原理


栈和堆的概念和区别
	栈：jvm中的一片内存区域，用于存储方法和局部变量。由于局部变量的生命周期短，变量离开了作用域就会失效，
		栈内存就被释放,所以栈内存的刷新速度很快。
	堆：jvm中的一片内存区域，用于存储实体对象（包括数组对象）。只要类或者对象中有某一个属性在用堆内存就不会被释放，
		只有当对象不再被引用时（对象没有被引用即为垃圾数据），GC垃圾回收机制才会不定时的回收这些垃圾数据，释放堆内存。


Java多线程——基本概念
应用程序：是一段静态的代码，是应用软件执行的蓝本。
一、进程
	1、什么是进程？
		—— 是程序的一次动态执行过程，它对应了从代码加载、执行至执行完毕的一个完整过程，这个过程也是进程本身从产生、发展至消亡的过程。
		—— 进程和进程之间的内存是独立的。
		—— 多进程不是同时执行，而是轮流切换执行。
	2、多进程的作用
		多进程的作用不是提高执行速度，而是提高 CPU 的使用率。

二、线程
	1、什么是线程？
		—— 线程是一个进程中的执行场景。一个进程可以启动多个线程。
		—— 是比进程更小的执行单位，每个线程也有它自身的产生、存在和消亡的过程，也是一个动态的概念。
		—— 多线程不是同时执行，而是轮流切换执行
	2、多线程的作用
		多线程不是为了提高执行速度，而是提高应用程序的使用率。


JVM
	描述：JVM本质上就是一种程序，对于Java来说它是一种字节码文件的执行环境，也是一种计算设备的规范，一种虚拟的计算机，用来适应各操作系统。

	JVM在运行时会开辟一片内存空间，这片内存空间主要组成部分：
		主要由方法区、本地方法栈、栈、堆、寄存器、垃圾回收机制。
		方法区：被所有线程共享，保存所有方法的定义信息，还有静态变量、常量、
		    类信息（接口/构造方法）、常量池都存在方法区内存中
		本地方法栈：主要作用就是用来加载本地类库，例如java类库

		栈：栈中的数据都是以栈帧的形式存在，一个栈帧即一个小存储区块，遵循先进后出的原则。
		    每个栈帧用来存储方法和局部变量，栈的生命周期跟随线程，线程结束则栈内存被释放。
			而每个栈帧的生命周期随着局部变量和方法被释放而结束。
		堆：被所有线程共享，堆内存是jvm内存中最大的一块。数据和实体对象都存储在堆内存中，
		    而堆内存的释放只会在数据和实体对象不被引用时才会被GC垃圾回收机制不定时的完成。
		寄存器：用来存储方法区中一些方法的执行顺序，就是一个指针，指向方法区，由执行引擎
		    来读取下一条要执行的指令，是一个非常小的内存空间

